{
  // Render vertical rulers at 80 and 120 columns.
  //
  // Code lines and standard comments SHOULD be less than 80 characters long,
  // while JSDoc-style docblocks SHOULD be shorter than 120 characters. But in
  // either case, these are not hard limits — some lines MAY be longer where
  // this is best for readability.

  "editor.rulers": [80, 120],

  // Transform tabs into two spaces.

  "editor.tabSize": 2,

  // Lines will wrap at the edge of the editor area.
  //
  "editor.wordWrap": "on",

  // Enable/disable VSCode's built-in JavaScript validation system. This
  // setting works only when the project folder is opened directly in VSCode,
  // rather than the project folder being added to a workspace.
  //
  "javascript.validate.enable": true,

  // Enable/disable VSCode's JS format-on-paste functionality. This setting also
  // works only when the project folder is opened directly in VSCode, ie as its
  // own workspace.
  //
  "javascript.format.enable": false,

  // Enable the TypeScript type checker in all JavaScript files by default.
  // This is equivalent to writing `@ts-check` in a comment at the top of all
  // JavaScript files. When enabled, JSDoc notations will be used to gather
  // additional type information for the intellisense system.
  //
  // This setting works only when the project folder is opened directly in
  // VSCode, rather than being added to a larger workspace. For this reason, we
  // also include the `@ts-check` comment at the top of all JavaScript files.
  "js/ts.implicitProjectConfig.checkJs": false,

  // Disable automatic file formatting for JS files. This
  // setting effectively disables Prettier, if that extension
  // is installed in the IDE.
  "[javascript]": {
    "editor.formatOnSave": false
  },

  // There is no maximum line length for Markdown files. In the editor, lines
  // wrap themselves after 120 characters.
  "[markdown]":{
    "editor.rulers": [],
    "editor.wordWrap": "bounded",
    "editor.wordWrapColumn": 120,
  },

  // Markdownlint rules. Use the default linting ruleset with some tweaks.
  // https://github.com/DavidAnson/vscode-markdownlint#markdownlintconfig
  "markdownlint.config": {
    "default": true,

    // Code blocks such as the following are allowed.
    // ```
    // $ mkdir test
    // $ ls
    // ```
    // https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md014
    "MD014": false,

    // Allow additional spaces after ordered/unordered list markers.
    // https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md030
    "MD030": false,

    // The first line of a Markdown file MAY not be a heading.
    // https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md041
    "MD041": false,
  },

  // Settings for the vscode-jest extension.
  // https://github.com/jest-community/vscode-jest

  // This is the command used to kick off tests in the terminal. The vscode-jest
  // extension will pass additional options to this command at runtime, so we
  // must append "--" to the "yarn run" command to ensure the injected options
  // get forwarded tothe "jest" command.
  //
  // https://github.com/jest-community/vscode-jest#jestcommandline
  "jest.jestCommandLine": "yarn run test -- ",

  // Jest is configured to run tests via VSCode as follows:
  // - Tests are NOT run automatically when VSCode is started up.
  // - Tests are NOT run automatically when source files or test files change.
  // - Test runs must be triggered manually in all cases.
  //
  // https://github.com/jest-community/vscode-jest#autorun
  "jest.autoRun": "off",

  // Spell check language. For consistency with our technical documentation,
  // we write in American English.
  "cSpell.language": "en-US",

  // File paths to not spell check.
  "cSpell.ignorePaths": [
    ".git",
    ".vscode",
    "*.log"
  ],

  // Enable/disable spelling errors on compound words like
  // 'errormessage' and 'builddir'. This setting makes the cSpell
  // spell check unreliable and so we must delimit words in code,
  // eg 'errorMessage` or `build_dir`.
  "cSpell.allowCompoundWords": false,

  // A list of words to be considered correct spellings.
  "cSpell.words": [
    "browserslist",
    "camelcase",
    "datatracker",
    "docblocks",
    "espree",
    "hackscorp",
    "hacksjs",
    "iife",
    "lcov",
    "linted",
    "linters",
    "nirvarnia",
    "ruleset",
    "rulesets",
    "stackoverflow",
    "styleguide",
    "stylesheet",
    "transcompilation",
    "transcompile",
    "transcompiler",
    "transcompilers",
    "tsdoc",
    "vals",
    "vars",
    "visualstudio",
    "vscode"
  ],

  // Spellings to always ignore. These are not real words, but are names or
  // identifiers of some kind: people's names, domain names, URL slugs, etc.
  "cSpell.ignoreWords": [
    "kieran",
    "kieranpotts",
    "potts"
  ],

  // Spellings always considered incorrect.
  // This is useful for common spelling errors.
  // For example, "hte" should be "the".
  "cSpell.flagWords": [
    "hte"
  ],

  // Configuration for the ToDo Tree extension. Use only `TODO` notations.
  // This setting works only in workspace roots.
  // https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree
  "todo-tree.general.tags": [
    "TODO",
  ],

  // Render line ending extension.
  // https://marketplace.visualstudio.com/items?itemName=medo64.render-crlf

  // Character used to display LF (line-feed) line ending
  // (aka Linux/Mac line ending).
  "code-eol.newlineCharacter": "↓",

  // Character used to display CR (carriage-return) line ending
  // (aka old Macintosh line ending).
  "code-eol.returnCharacter" : "←",

  // Character used to display CRLF (carriage-return, line-feed) line ending
  // (aka Windows line ending).
  "code-eol.crlfCharacter"   : "↵",

}
